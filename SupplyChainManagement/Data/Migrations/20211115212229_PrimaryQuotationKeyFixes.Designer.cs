// <auto-generated />
using System;
using Entities.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Entities.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    [Migration("20211115212229_PrimaryQuotationKeyFixes")]
    partial class PrimaryQuotationKeyFixes
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Entities.Models.Attachment", b =>
                {
                    b.Property<int>("AttachmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("DocumentName")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("DocumentPath")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Extension")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int?>("ProcessId")
                        .HasColumnType("int");

                    b.Property<int?>("ProcessTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.HasKey("AttachmentId");

                    b.HasIndex("ProcessId");

                    b.HasIndex("ProcessTypeId");

                    b.ToTable("Attachment");
                });

            modelBuilder.Entity("Entities.Models.City", b =>
                {
                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("CityName")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("ProvinceId")
                        .HasColumnType("int");

                    b.HasKey("CityId");

                    b.HasIndex("ProvinceId");

                    b.ToTable("City");
                });

            modelBuilder.Entity("Entities.Models.Classification", b =>
                {
                    b.Property<int>("ClassificationId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("ClassificationId");

                    b.ToTable("Classification");
                });

            modelBuilder.Entity("Entities.Models.Commodity", b =>
                {
                    b.Property<int>("CommodityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CommodityId");

                    b.ToTable("Commodity");
                });

            modelBuilder.Entity("Entities.Models.Contract", b =>
                {
                    b.Property<Guid>("ContractId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ContractTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ContractId");

                    b.ToTable("Contract");
                });

            modelBuilder.Entity("Entities.Models.ContractType", b =>
                {
                    b.Property<int>("ContractTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ContractTypeId");

                    b.ToTable("ContractType");
                });

            modelBuilder.Entity("Entities.Models.Country", b =>
                {
                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("CountryName")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("CountryId");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("Entities.Models.DemandPlan", b =>
                {
                    b.Property<int>("DemandPlanId")
                        .HasColumnType("int");

                    b.Property<string>("Item")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18, 0)");

                    b.HasKey("DemandPlanId");

                    b.ToTable("DemandPlan");
                });

            modelBuilder.Entity("Entities.Models.Department", b =>
                {
                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("DepartmentId");

                    b.ToTable("Department");
                });

            modelBuilder.Entity("Entities.Models.DocumentSubmissionStatus", b =>
                {
                    b.Property<int>("DocumentStatusId")
                        .HasColumnType("int");

                    b.Property<int>("ProcessTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("RequisitionId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int?>("SupplierId")
                        .HasColumnType("int");

                    b.Property<int?>("TenderId")
                        .HasColumnType("int");

                    b.HasKey("DocumentStatusId")
                        .HasName("PK__Document__AFDCAF5D2275BE8A");

                    b.HasIndex("ProcessTypeId");

                    b.HasIndex("RequisitionId");

                    b.HasIndex("SupplierId");

                    b.HasIndex("TenderId");

                    b.ToTable("DocumentSubmissionStatus");
                });

            modelBuilder.Entity("Entities.Models.FinancialYear", b =>
                {
                    b.Property<int>("FinancialYearId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.HasKey("FinancialYearId");

                    b.ToTable("FinancialYear");
                });

            modelBuilder.Entity("Entities.Models.Municipality", b =>
                {
                    b.Property<int>("MunicipalityId")
                        .HasColumnType("int");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("MunicipalityAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("MunicipalityEmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("MunicipalityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("MunicipalityTelephone")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("MunicipalityId");

                    b.HasIndex("CityId");

                    b.ToTable("Municipality");
                });

            modelBuilder.Entity("Entities.Models.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Action")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Cc")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("date");

                    b.Property<string>("From")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("Link")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RequisitionId")
                        .HasColumnType("int");

                    b.Property<string>("To")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("NotificationId");

                    b.HasIndex("RequisitionId");

                    b.ToTable("Notification");
                });

            modelBuilder.Entity("Entities.Models.PaymentMethod", b =>
                {
                    b.Property<int>("PaymentMethodId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("PaymentMethodId");

                    b.ToTable("PaymentMethod");
                });

            modelBuilder.Entity("Entities.Models.PaymentTerm", b =>
                {
                    b.Property<int>("PaymentTermId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("PaymentTermId");

                    b.ToTable("PaymentTerm");
                });

            modelBuilder.Entity("Entities.Models.ProcessType", b =>
                {
                    b.Property<int>("ProcessTypeId")
                        .HasColumnType("int");

                    b.Property<string>("ProcessName")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("ProcessTypeId");

                    b.ToTable("ProcessType");
                });

            modelBuilder.Entity("Entities.Models.Project", b =>
                {
                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("ProjectId");

                    b.ToTable("Project");
                });

            modelBuilder.Entity("Entities.Models.Province", b =>
                {
                    b.Property<int>("ProvinceId")
                        .HasColumnType("int");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("ProvinceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("ProvinceId");

                    b.HasIndex("CountryId");

                    b.ToTable("Province");
                });

            modelBuilder.Entity("Entities.Models.Quotation", b =>
                {
                    b.Property<int>("QuotationId")
                        .HasColumnType("int");

                    b.Property<string>("BillToAddress")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("BillToName")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("DateCreated")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("DateUpdated")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Item")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("ItemDescription")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("QuotationName")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("QuoteCreatedBy")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int?>("RequisitionId")
                        .HasColumnType("int");

                    b.Property<string>("SpecialNotesAndInstructions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("SubTotal")
                        .HasColumnType("float");

                    b.Property<string>("SupplierAddress")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("SupplierEmail")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("SupplierFax")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int?>("SupplierId")
                        .HasColumnType("int");

                    b.Property<string>("SupplierPhoneNumber")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<double?>("TaxRate")
                        .HasColumnType("float");

                    b.Property<string>("TermsAndContions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Total")
                        .HasColumnType("float");

                    b.Property<double?>("TotalTaxedAmount")
                        .HasColumnType("float");

                    b.Property<double?>("UnitPrice")
                        .HasColumnType("float");

                    b.Property<DateTime?>("ValidUntil")
                        .HasColumnType("datetime");

                    b.HasKey("QuotationId");

                    b.ToTable("Quotation");
                });

            modelBuilder.Entity("Entities.Models.Requisition", b =>
                {
                    b.Property<int>("RequisitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("ApprovalException")
                        .HasColumnType("bit");

                    b.Property<string>("AttachmentDescription")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("AttachmentPath")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<bool?>("AttachmentVisibleToSupplier")
                        .HasColumnType("bit");

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<int?>("ClassificationId")
                        .HasColumnType("int");

                    b.Property<int?>("CommodityId")
                        .HasColumnType("int");

                    b.Property<int?>("ContractTypeId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime");

                    b.Property<string>("DeliveryAddress")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int?>("DemandPlanId")
                        .HasColumnType("int");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("DetailedDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ExpectedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Glaccount")
                        .HasColumnName("GLAccount")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsComplete")
                        .HasColumnType("bit");

                    b.Property<string>("Item")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("ItemDescription")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Motivation")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<bool?>("OverwriteExistingAttachment")
                        .HasColumnType("bit");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("QueriesEmail")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("QueriesName")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("QueriesPhone")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("RequestedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RequisitionNo")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RequisitionTitle")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int?>("RequisitionTypeId")
                        .HasColumnType("int");

                    b.Property<bool?>("ServiceItem")
                        .HasColumnType("bit");

                    b.Property<int?>("ShippingMethodId")
                        .HasColumnType("int");

                    b.Property<bool?>("SiteVisitRequired")
                        .HasColumnType("bit");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<decimal?>("SubTotal")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<decimal?>("Total")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<int?>("UnitOfMeasure")
                        .HasColumnType("int");

                    b.Property<decimal?>("UnitPrice")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<decimal?>("Vattotal")
                        .HasColumnName("VATTotal")
                        .HasColumnType("decimal(18, 0)");

                    b.HasKey("RequisitionId");

                    b.HasIndex("CityId");

                    b.HasIndex("ClassificationId");

                    b.HasIndex("CommodityId");

                    b.HasIndex("ContractTypeId");

                    b.HasIndex("DemandPlanId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("RequisitionTypeId");

                    b.HasIndex("ShippingMethodId");

                    b.ToTable("Requisition");
                });

            modelBuilder.Entity("Entities.Models.RequisitionType", b =>
                {
                    b.Property<int>("RequisitionTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("RequisitionTypeId");

                    b.ToTable("RequisitionType");
                });

            modelBuilder.Entity("Entities.Models.ShippingMethod", b =>
                {
                    b.Property<int>("ShippingMethodId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.HasKey("ShippingMethodId");

                    b.ToTable("ShippingMethod");
                });

            modelBuilder.Entity("Entities.Models.Status", b =>
                {
                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<string>("Status1")
                        .HasColumnName("Status")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("StatusId");

                    b.ToTable("Status");
                });

            modelBuilder.Entity("Entities.Models.Supplier", b =>
                {
                    b.Property<int>("SupplierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Bbbeeid")
                        .HasColumnName("BBBEEId")
                        .HasColumnType("int");

                    b.Property<string>("BuildingName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<int>("ClassificationId")
                        .HasColumnType("int");

                    b.Property<string>("ContactPersonCell")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("ContactPersonEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("ContactPersonFax")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("ContactPersonName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("ContactPersonPosition")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("ContactPersonSurname")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("ContactPersonTelephone")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("LegalName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int>("MunicipalityId")
                        .HasColumnType("int");

                    b.Property<int>("PaymentMethodId")
                        .HasColumnType("int");

                    b.Property<int>("PaymentTermId")
                        .HasColumnType("int");

                    b.Property<int>("PostalCode")
                        .HasColumnType("int");

                    b.Property<int>("ProvinceId")
                        .HasColumnType("int");

                    b.Property<bool>("QuotationContact")
                        .HasColumnType("bit");

                    b.Property<string>("RegistrationNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("StreetName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("SupplierName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Surburb")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<bool>("Vatregistered")
                        .HasColumnName("VATRegistered")
                        .HasColumnType("bit");

                    b.Property<string>("VatregistrationNo")
                        .IsRequired()
                        .HasColumnName("VATRegistrationNo")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int>("WardId")
                        .HasColumnType("int");

                    b.HasKey("SupplierId");

                    b.HasIndex("CityId");

                    b.HasIndex("ClassificationId");

                    b.HasIndex("CountryId");

                    b.HasIndex("MunicipalityId");

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex("ProvinceId");

                    b.HasIndex("WardId");

                    b.ToTable("Supplier");
                });

            modelBuilder.Entity("Entities.Models.SupplierCategory", b =>
                {
                    b.Property<string>("SupplierCategory1")
                        .HasColumnName("SupplierCategory")
                        .HasColumnType("varchar(250)")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<int>("SupplierCategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("SupplierId")
                        .HasColumnType("int");

                    b.HasIndex("SupplierId");

                    b.ToTable("SupplierCategory");
                });

            modelBuilder.Entity("Entities.Models.Tender", b =>
                {
                    b.Property<int>("TenderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Buyer")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int>("ClassificationId")
                        .HasColumnType("int");

                    b.Property<string>("CommitteeCoordinator")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<double?>("EstimatedValue")
                        .HasColumnType("float");

                    b.Property<int>("FinancialYearId")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfSuppliers")
                        .HasColumnType("int");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TenderAdvertDate")
                        .HasColumnType("datetime");

                    b.Property<string>("TenderCoordinator")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("TenderOutcomeId")
                        .HasColumnType("int");

                    b.Property<int>("TenderTypeId")
                        .HasColumnType("int");

                    b.HasKey("TenderId");

                    b.HasIndex("ClassificationId");

                    b.HasIndex("FinancialYearId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("TenderTypeId");

                    b.ToTable("Tender");
                });

            modelBuilder.Entity("Entities.Models.TenderOutcome", b =>
                {
                    b.Property<int>("TenderOutcomeId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("TenderOutcomeId");

                    b.ToTable("TenderOutcome");
                });

            modelBuilder.Entity("Entities.Models.TenderType", b =>
                {
                    b.Property<int>("TenderTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TenderTypeId");

                    b.ToTable("TenderType");
                });

            modelBuilder.Entity("Entities.Models.Ward", b =>
                {
                    b.Property<int>("WardId")
                        .HasColumnType("int");

                    b.Property<int>("MunicipalityId")
                        .HasColumnType("int");

                    b.Property<string>("WardName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("WardId");

                    b.HasIndex("MunicipalityId");

                    b.ToTable("Ward");
                });

            modelBuilder.Entity("Entities.Models.Attachment", b =>
                {
                    b.HasOne("Entities.Models.Quotation", "Process")
                        .WithMany("Attachment")
                        .HasForeignKey("ProcessId")
                        .HasConstraintName("FK__Attachmen__Proce__756D6ECB");

                    b.HasOne("Entities.Models.Requisition", "ProcessNavigation")
                        .WithMany("Attachment")
                        .HasForeignKey("ProcessId")
                        .HasConstraintName("FK__Attachmen__Proce__74794A92");

                    b.HasOne("Entities.Models.Supplier", "Process1")
                        .WithMany("Attachment")
                        .HasForeignKey("ProcessId")
                        .HasConstraintName("FK__Attachmen__Proce__7755B73D");

                    b.HasOne("Entities.Models.Tender", "Process2")
                        .WithMany("Attachment")
                        .HasForeignKey("ProcessId")
                        .HasConstraintName("FK__Attachmen__Proce__76619304");

                    b.HasOne("Entities.Models.ProcessType", "ProcessType")
                        .WithMany("Attachment")
                        .HasForeignKey("ProcessTypeId")
                        .HasConstraintName("FK__Attachmen__Proce__5BAD9CC8");
                });

            modelBuilder.Entity("Entities.Models.City", b =>
                {
                    b.HasOne("Entities.Models.Province", "Province")
                        .WithMany("City")
                        .HasForeignKey("ProvinceId")
                        .HasConstraintName("FK__City__ProvinceId__07C12930")
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Models.DocumentSubmissionStatus", b =>
                {
                    b.HasOne("Entities.Models.ProcessType", "ProcessType")
                        .WithMany("DocumentSubmissionStatus")
                        .HasForeignKey("ProcessTypeId")
                        .HasConstraintName("FK__DocumentS__Proce__08B54D69")
                        .IsRequired();

                    b.HasOne("Entities.Models.Requisition", "Requisition")
                        .WithMany("DocumentSubmissionStatus")
                        .HasForeignKey("RequisitionId")
                        .HasConstraintName("FK__DocumentS__Requi__43D61337");

                    b.HasOne("Entities.Models.Supplier", "Supplier")
                        .WithMany("DocumentSubmissionStatus")
                        .HasForeignKey("SupplierId")
                        .HasConstraintName("FK__DocumentS__Suppl__56E8E7AB");

                    b.HasOne("Entities.Models.Tender", "Tender")
                        .WithMany("DocumentSubmissionStatus")
                        .HasForeignKey("TenderId")
                        .HasConstraintName("FK__DocumentS__Tende__09A971A2");
                });

            modelBuilder.Entity("Entities.Models.Municipality", b =>
                {
                    b.HasOne("Entities.Models.City", "City")
                        .WithMany("Municipality")
                        .HasForeignKey("CityId")
                        .HasConstraintName("FK__Municipal__CityI__0C85DE4D")
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Models.Notification", b =>
                {
                    b.HasOne("Entities.Models.Requisition", "Requisition")
                        .WithMany("Notification")
                        .HasForeignKey("RequisitionId")
                        .HasConstraintName("FK__Notificat__Requi__7C1A6C5A")
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Models.Province", b =>
                {
                    b.HasOne("Entities.Models.Country", "Country")
                        .WithMany("Province")
                        .HasForeignKey("CountryId")
                        .HasConstraintName("FK__Province__Countr__1DB06A4F")
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Models.Requisition", b =>
                {
                    b.HasOne("Entities.Models.City", "City")
                        .WithMany("Requisition")
                        .HasForeignKey("CityId")
                        .HasConstraintName("FK__Requisiti__CityI__4A8310C6");

                    b.HasOne("Entities.Models.Classification", "Classification")
                        .WithMany("Requisition")
                        .HasForeignKey("ClassificationId")
                        .HasConstraintName("FK__Requisiti__Class__489AC854");

                    b.HasOne("Entities.Models.Commodity", "Commodity")
                        .WithMany("Requisition")
                        .HasForeignKey("CommodityId")
                        .HasConstraintName("FK__Requisiti__Commo__4B7734FF");

                    b.HasOne("Entities.Models.ContractType", "ContractType")
                        .WithMany("Requisition")
                        .HasForeignKey("ContractTypeId")
                        .HasConstraintName("FK__Requisiti__Contr__46B27FE2");

                    b.HasOne("Entities.Models.DemandPlan", "DemandPlan")
                        .WithMany("Requisition")
                        .HasForeignKey("DemandPlanId")
                        .HasConstraintName("FK__Requisiti__Deman__498EEC8D");

                    b.HasOne("Entities.Models.Department", "Department")
                        .WithMany("Requisition")
                        .HasForeignKey("DepartmentId")
                        .HasConstraintName("FK__Requisiti__Depar__45BE5BA9");

                    b.HasOne("Entities.Models.RequisitionType", "RequisitionType")
                        .WithMany("Requisition")
                        .HasForeignKey("RequisitionTypeId")
                        .HasConstraintName("FK__Requisiti__Requi__44CA3770");

                    b.HasOne("Entities.Models.ShippingMethod", "ShippingMethod")
                        .WithMany("Requisition")
                        .HasForeignKey("ShippingMethodId")
                        .HasConstraintName("FK__Requisiti__Shipp__47A6A41B");
                });

            modelBuilder.Entity("Entities.Models.Supplier", b =>
                {
                    b.HasOne("Entities.Models.City", "City")
                        .WithMany("Supplier")
                        .HasForeignKey("CityId")
                        .HasConstraintName("FK__Supplier__CityId__2645B050")
                        .IsRequired();

                    b.HasOne("Entities.Models.Classification", "Classification")
                        .WithMany("Supplier")
                        .HasForeignKey("ClassificationId")
                        .HasConstraintName("FK__Supplier__Classi__2739D489")
                        .IsRequired();

                    b.HasOne("Entities.Models.Country", "Country")
                        .WithMany("Supplier")
                        .HasForeignKey("CountryId")
                        .HasConstraintName("FK__Supplier__Countr__2DE6D218")
                        .IsRequired();

                    b.HasOne("Entities.Models.Municipality", "Municipality")
                        .WithMany("Supplier")
                        .HasForeignKey("MunicipalityId")
                        .HasConstraintName("FK__Supplier__Munici__2EDAF651")
                        .IsRequired();

                    b.HasOne("Entities.Models.PaymentMethod", "PaymentMethod")
                        .WithMany("Supplier")
                        .HasForeignKey("PaymentMethodId")
                        .HasConstraintName("FK__Supplier__Paymen__282DF8C2")
                        .IsRequired();

                    b.HasOne("Entities.Models.Province", "Province")
                        .WithMany("Supplier")
                        .HasForeignKey("ProvinceId")
                        .HasConstraintName("FK__Supplier__Provin__2BFE89A6")
                        .IsRequired();

                    b.HasOne("Entities.Models.Ward", "Ward")
                        .WithMany("Supplier")
                        .HasForeignKey("WardId")
                        .HasConstraintName("FK__Supplier__WardId__2CF2ADDF")
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Models.SupplierCategory", b =>
                {
                    b.HasOne("Entities.Models.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .HasConstraintName("FK__SupplierC__Suppl__4E53A1AA");
                });

            modelBuilder.Entity("Entities.Models.Tender", b =>
                {
                    b.HasOne("Entities.Models.Classification", "Classification")
                        .WithMany("Tender")
                        .HasForeignKey("ClassificationId")
                        .HasConstraintName("FK__Tender__Classifi__17036CC0")
                        .IsRequired();

                    b.HasOne("Entities.Models.FinancialYear", "FinancialYear")
                        .WithMany("Tender")
                        .HasForeignKey("FinancialYearId")
                        .HasConstraintName("FK__Tender__Financia__17F790F9")
                        .IsRequired();

                    b.HasOne("Entities.Models.Project", "Project")
                        .WithMany("Tender")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("FK__Tender__ProjectI__18EBB532")
                        .IsRequired();

                    b.HasOne("Entities.Models.TenderType", "TenderType")
                        .WithMany("Tender")
                        .HasForeignKey("TenderTypeId")
                        .HasConstraintName("FK__Tender__TenderTy__19DFD96B")
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Models.Ward", b =>
                {
                    b.HasOne("Entities.Models.Municipality", "Municipality")
                        .WithMany("Ward")
                        .HasForeignKey("MunicipalityId")
                        .HasConstraintName("FK__Ward__Municipali__1AD3FDA4")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
