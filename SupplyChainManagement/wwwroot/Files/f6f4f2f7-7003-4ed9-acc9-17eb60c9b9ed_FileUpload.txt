private IHostingEnvironment hostingEnv;
public DefaultController(IHostingEnvironment env)
    {
        this.hostingEnv = env;
    }
    public void Save(IList<IFormFile> chunkFile, IList<IFormFile> UploadFiles)
    {
        long size = 0;
        try
        {
            foreach (var file in UploadFiles)
            {
                var filename = ContentDispositionHeaderValue
                    .Parse(file.ContentDisposition)
                    .FileName
                    .Trim('"');
                var folders = filename.Split('/');
                var uploaderFilePath = hostingEnv.WebRootPath;
                    // for Directory upload
                if (folders.Length > 1)
                {
                    for (var i = 0; i < folders.Length - 1; i++)
                    {
                        var newFolder = uploaderFilePath + $@"\{folders[i]}";
                        Directory.CreateDirectory(newFolder);
                        uploaderFilePath = newFolder;
                        filename = folders[i + 1];
                    }
                }
                filename = uploaderFilePath + $@"\{filename}";
                size += file.Length;
                if (!System.IO.File.Exists(filename))
                {
                    using (FileStream fs = System.IO.File.Create(filename))
                    {
                        file.CopyTo(fs);
                        fs.Flush();
                    }

                }
            }
        }
        catch (Exception e)
        {
            Response.Clear();
            Response.StatusCode = 204;
            Response.HttpContext.Features.Get<IHttpResponseFeature>().ReasonPhrase = "File failed to upload";
            Response.HttpContext.Features.Get<IHttpResponseFeature>().ReasonPhrase = e.Message;
        }
    }





Server side configuration
----------------------------------------------------------



public HomeController(IHostingEnvironment env)
{
this.hostingEnv = env;
}
// Upload save method for chunk-upload
public void Save(IList<IFormFile> chunkFile, IList<IFormFile> UploadFiles )
{
long size = 0;
try
{
    // for chunk-upload
    foreach (var file in chunkFile)
    {
        var filename = ContentDispositionHeaderValue
                            .Parse(file.ContentDisposition)
                            .FileName
                            .Trim('"');
        filename = hostingEnv.WebRootPath + $@"\{filename}";
        size += file.Length;
        if (!System.IO.File.Exists(filename))
        {
            using (FileStream fs = System.IO.File.Create(filename))
            {
                file.CopyTo(fs);
                fs.Flush();
            }
        }
        else
        {
            using (FileStream fs = System.IO.File.Open(filename, FileMode.Append))
            {
                file.CopyTo(fs);
                fs.Flush();
            }
        }
    }
}
catch (Exception e)
{
    Response.Clear();
    Response.StatusCode = 204;
    Response.HttpContext.Features.Get<IHttpResponseFeature>().ReasonPhrase = "File failed to upload";
    Response.HttpContext.Features.Get<IHttpResponseFeature>().ReasonPhrase = e.Message;
}
}

// Server configuration for remove a uploaded file

private IHostingEnvironment hostingEnv;

public HomeController(IHostingEnvironment env)
{
this.hostingEnv = env;
}
public void Remove(IList<IFormFile> UploadFiles)
{
try
{
    foreach (var file in UploadFiles)
    {
        var fileName = ContentDispositionHeaderValue.Parse(file.ContentDisposition).FileName.Trim('"');
        var filePath = Path.Combine(hostingEnv.WebRootPath);
        var fileSavePath = filePath + "\\" + fileName;
        if (System.IO.File.Exists(fileSavePath))
        {
            System.IO.File.Delete(fileSavePath);
        }
    }
}
catch (Exception e)
{
    Response.Clear();
    Response.StatusCode = 200;
    Response.HttpContext.Features.Get<IHttpResponseFeature>().ReasonPhrase = "File removed successfully";
    Response.HttpContext.Features.Get<IHttpResponseFeature>().ReasonPhrase = e.Message;
}
}